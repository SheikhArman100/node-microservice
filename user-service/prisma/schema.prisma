generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URI")
}

enum FileType {
  IMAGE
  VIDEO
  DOCUMENT
  OTHER
}

enum DiskType {
  LOCAL
  AWS
  SHARED
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  level       Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[] @relation("UserRole") // Direct relation to users
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  resource    String
  action      String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("rolePermissions")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  phoneNumber String
  password    String
  isVerified  Boolean  @default(false)
  userRole    Role? @relation(fields: [roleId], references: [id], name: "UserRole") 
  roleId      Int? // Foreign key to Role table
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //relations
  detail       UserDetail?
  refreshToken RefreshToken?

  //indexing
  @@index([email])
  @@index([phoneNumber])
  //rename database table name
  @@map("users")
}

model UserDetail {
  id      Int    @id @default(autoincrement())
  image    File?
  address String?
  city    String?
  road    String?
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userDetails")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  //indexing
  @@index([userId])
  //rename database table name
  @@map("refreshTokens")
}

model File {
  id           Int      @id @default(autoincrement())
  diskType     DiskType
  path         String
  originalName String
  modifiedName String
  type         FileType   
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  //relations

  userDetailId Int? @unique
  userDetail UserDetail? @relation(fields: [userDetailId], references: [id], onDelete: Cascade)

  @@map("files")
}